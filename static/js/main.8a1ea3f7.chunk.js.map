{"version":3,"sources":["redux/auth/auth-actions.js","redux/auth/auth-operations.js","redux/auth/auth-reducer.js","redux/auth/auth-selectors.js","routes.js","redux/store.js","components/Container/Container.jsx","components/Navigation/Navigation.jsx","components/AuthNav/AuthNav.jsx","components/UserMenu/UserMenu.jsx","components/AppBar/AppBar.jsx","components/PrivateRoute.jsx","components/PublicRoute.jsx","App.jsx","index.js","components/AuthNav/AuthNav.module.scss","components/Navigation/Navigation.module.scss","components/UserMenu/UserMenu.module.scss","components/Loader/Loader.jsx","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","components/Container/Container.module.scss","components/AppBar/AppBar.module.scss"],"names":["registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","authActions","post","data","message","toast","error","logIn","logOut","getCurrentUser","getState","persistedToken","auth","get","initialUserState","name","email","user","createReducer","_","payload","isAuthenticated","loading","combineReducers","getIsAuthenticated","state","getUserEmail","getUserName","getLoading","routes","HOME","REGISTRATION","LOGIN","PHONEBOOK","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","Container","children","className","styles","container","defaultProps","Navigation","useSelector","authSelectors","list","item","exact","to","link","activeClassName","AuthNav","UserMenu","useDispatch","onLogout","useCallback","authOperations","profile","thumb","src","alt","title","avatar","welcome","type","aria-label","onClick","button","AppBar","header","PrivateRoute","redirectTo","routeProps","isLoggedIn","PublicRoute","restricted","HomeView","lazy","PhoneBookView","RegisterView","LoginView","PageNotFound","App","useEffect","fallback","Loader","path","ReactDOM","render","StrictMode","document","getElementById","module","exports","role","color","width","height","style","display","justifyContent","margin","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","fetchContacts","actions","addContact","number","contact","success","deleteContact","id","delete","info","items","sort","b","localeCompare","filter","getContacts","getFilter","getError","getfilteredContacts","createSelector","normalizedFilter","toLowerCase","includes"],"mappings":"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","file":"static/js/main.8a1ea3f7.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\n// eslint-disable-next-line\nexport default {\n  registerRequest,\n  registerSuccess,\n  registerError,\n\n  loginRequest,\n  loginSuccess,\n  loginError,\n\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\n// Обьект токена\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n// Операция регистрации юзера\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const { data } = await axios.post('/users/signup', credentials);\n\n    token.set(data.token);\n    dispatch(authActions.registerSuccess(data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Операция авторизации юзера\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const { data } = await axios.post('/users/login', credentials);\n\n    token.set(data.token);\n    dispatch(authActions.loginSuccess(data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Операция выхода из профиля\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Операция получения текущего пользователя (проверяем локальное хранилище через персист)\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) return;\n\n  token.set(persistedToken);\n\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const { data } = await axios.get('/users/current');\n\n    dispatch(authActions.getCurrentUserSuccess(data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// eslint-disable-next-line\nexport default { register, logIn, logOut, getCurrentUser };\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = {\n  name: null,\n  email: null,\n};\n\n// Редюсер для регистрации, авторизации и выхода из профиля\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\n// Редюсер для токенов\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\n// Редюсер для индикации авторизации\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n\n  [authActions.logoutSuccess]: () => false,\n});\n\n// Создание редюсера для индикации авторизации\nconst loading = createReducer(false, {\n  [authActions.registerRequest]: () => true,\n  [authActions.registerSuccess]: () => false,\n  [authActions.registerError]: () => false,\n\n  [authActions.loginRequest]: () => true,\n  [authActions.loginSuccess]: () => false,\n  [authActions.loginError]: () => false,\n\n  [authActions.logoutRequest]: () => true,\n  [authActions.logoutSuccess]: () => false,\n  [authActions.logoutError]: () => false,\n\n  [authActions.getCurrentUserRequest]: () => true,\n  [authActions.getCurrentUserSuccess]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n});\n\n// Обработку ошибок можно абстрагировать\n// const setError = (_, { payload }) => payload;\n\n// Редюсер для обработки ошибок\nconst error = createReducer(null, {\n  [authActions.registerError]: (_, { payload }) => payload,\n  [authActions.loginError]: (_, { payload }) => payload,\n  [authActions.logoutError]: (_, { payload }) => payload,\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  user,\n  token,\n  isAuthenticated,\n  loading,\n  error,\n});\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\n\nconst getUserEmail = state => state.auth.user.email;\nconst getUserName = state => state.auth.user.name;\nconst getLoading = state => state.auth.loading;\n\n// eslint-disable-next-line\nexport default { getIsAuthenticated, getUserEmail,getUserName, getLoading };\n","  // eslint-disable-next-line\n// export default {\n//   home: '/',\n//   contacts: '/contacts',\n//   register: '/register',\n//   login: '/login',\n// };\nconst routes = {\n  HOME: '/',\n  REGISTRATION: '/register',\n  LOGIN: '/login',\n  PHONEBOOK: '/contacts/',  //phonebook\n};\n\nexport default routes;","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // Импорт функции создания хранилища и прослойки\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'; // Импорт функции персистеров и фикса консоли\nimport storage from 'redux-persist/lib/storage'; // Импорт локального хранилища\nimport logger from 'redux-logger'; // Импорт логгера\n\nimport { authReducer } from './auth'; // Импорт редюсера по авторизации\nimport { contactsReducer } from './contacts'; // Импорт редюсера по контактам\n\n// Создание прослоек + логгер. Важен порядок!\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\n// Добавляет логгер только для продакшена\nif (process.env.NODE_ENV === `development`) {\n  middleware.push(logger);\n}\n\n// Конфиг персистора\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\n// Создание хранилища (корневой редюсер + прослойки + тулзы только для разработки)\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// Создание персистора\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line\nexport default { store, persistor };\n","import PropTypes from 'prop-types';\n\nimport styles from './Container.module.scss';\n\n// Компонент контейнера\nexport default function Container({ children }) {\n  return (\n   <div className={styles.container}>\n         \n      {children}\n    </div>\n    );\n}\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport { authSelectors } from '../../redux/auth';\nimport routes from '../../routes';\n\nimport styles from './Navigation.module.scss';\n\n// Компонент главной навигации (меню) приложения\nexport default function Navigation() {\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated); // Селектор статуса авторизации юзера\n\n  return (\n    <nav>\n      <ul className={styles.list}>\n        <li className={styles.item}>\n          <NavLink\n            exact\n            to={routes.HOME}\n            className={styles.link}\n            activeClassName={styles['link--active']}\n          >\n            Home\n          </NavLink>\n        </li>\n\n        {isAuthenticated && (\n          <li>\n            <NavLink\n              to={routes.PHONEBOOK}\n              className={styles.link}\n              activeClassName={styles['link--active']}\n            >\n              Contacts\n            </NavLink>\n          </li>\n        )}\n      </ul>\n    </nav>\n  );\n}\n","import { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nimport styles from './AuthNav.module.scss';\n\n// Компонент меню регистрации и авторизации\nexport default function AuthNav() {\n  return (\n    <ul className={styles.list}>\n      <li className={styles.item}>\n        <NavLink\n          to={routes.REGISTRATION}\n          className={styles.link}\n          activeClassName={styles['link--active']}\n        >\n          Sign up\n        </NavLink>\n      </li>\n\n      <li className={styles.item}>\n        <NavLink\n          exact\n          to={routes.LOGIN}\n          className={styles.link}\n          activeClassName={styles['link--active']}\n        >\n          Sign in\n        </NavLink>\n      </li>\n    </ul>\n  );\n}\n","import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authSelectors, authOperations } from '../../redux/auth';\n\nimport styles from './UserMenu.module.scss';\n\n// Компонент меню пользователя после авторизации\nexport default function UserMenu() {\n  //const email = useSelector(authSelectors.getUserEmail); // Селектор почты юзера\n  const name = useSelector(authSelectors.getUserName);\n\n  const dispatch = useDispatch();\n\n  // Диспатчит операцию выхода из профиля + useCallback\n  const onLogout = useCallback(() => dispatch(authOperations.logOut()), [\n    dispatch,\n  ]);\n\n  return (\n    <div className={styles.profile}>\n      <div className={styles.thumb}>\n        <img\n          //src={`https://eu.ui-avatars.com/api/?background=2196f3&color=fff&&length=1&name=${email}`}\n          src={`https://eu.ui-avatars.com/api/?background=2196f3&color=fff&&length=1&name=${name}`}\n          alt=\"avatar\"\n          title=\"Your avatar\"\n          className={styles.avatar}\n        />\n      </div>\n\n      <span className={styles.welcome}>\n        {/* Welcome, <span className={styles.email}>{email}</span> */}\n        Welcome, <span className={styles.name}>{name}</span>\n      </span>\n\n      <button\n        type=\"button\"\n        title=\"Log out\"\n        aria-label=\"Log out\"\n        onClick={onLogout}\n        className={styles.button}\n      >\n        Logout\n      </button>\n    </div>\n  );\n}\n","import { useSelector } from 'react-redux';\n\nimport { authSelectors } from '../../redux/auth';\n\nimport Navigation from '../Navigation';\nimport AuthNav from '../AuthNav';\nimport UserMenu from '../UserMenu';\n\nimport styles from './AppBar.module.scss';\n\n// Компонент хедера приложения (бара)\nexport default function AppBar() {\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated); // Селектор статуса авторизации юзера\n\n  return (\n    <header className={styles.header}>\n      <Navigation />\n\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n}\n","import { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n// - Если маршрут приватный и пользователь залогинен, рендерит компонент\n// - В противном случае рендерит Redirect на указанный роут\n\n// Компонент приватного роута\nexport default function PrivateRoute({\n  redirectTo,\n  children,\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <Route {...routeProps}>\n      {isLoggedIn\n        ? children\n        : <Redirect to={redirectTo} />}\n    </Route>\n  );\n}\n","import { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n// - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на указанный роут\n// - В противном случае рендерит компонент\n\n// Компонент публичного роута\nexport default function PublicRoute({\n  redirectTo,\n  children,\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated); // Селектор статуса авторизации\n\n  return (\n    <Route {...routeProps}>\n      {isLoggedIn && routeProps.restricted\n        ? (<Redirect to={redirectTo} />)\n        : (children)\n      }\n    </Route>\n  );\n}\n","import { Suspense, lazy, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Switch } from 'react-router-dom';\n\n//import { ToastContainer } from 'react-toastify';\n\nimport routes from './routes';\nimport { authOperations } from './redux/auth';\n\nimport Container from './components/Container';\nimport AppBar from './components/AppBar';\n//import AppFooter from './components/AppFooter';\nimport Loader from './components/Loader';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst HomeView = lazy(() =>\n  import('./Views/HomeView' /* webpackChunkName: \"home-page\" */),\n);\nconst PhoneBookView = lazy(() =>\n  import('./Views/PhoneBookView' /* webpackChunkName: \"Phone-book-page\" */),\n);\nconst RegisterView = lazy(() =>\n  import('./Views/RegisterView' /* webpackChunkName: \"register-page\" */),\n);\nconst LoginView = lazy(() =>\n  import('./Views/LoginView' /* webpackChunkName: \"login-page\" */),\n);\nconst PageNotFound = lazy(() =>\n  import('./Views/PageNotFound' /* webpackChunkName: \"404-page-not-found\" */),\n);\n\nexport default function App() {\n  const dispatch = useDispatch();\n\n  // Получение текущего юзера при маунте приложения\n  useEffect(() => {\n    dispatch(authOperations.getCurrentUser());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <AppBar />\n\n      <Suspense fallback={<Loader />}>\n        <Switch>\n          \n          <PublicRoute\n            exact path={routes.HOME}>\n            <HomeView />\n          </PublicRoute>\n\n          <PublicRoute\n            path={routes.REGISTRATION}\n            restricted\n            redirectTo={routes.PHONEBOOK}>\n            <RegisterView />\n          </PublicRoute>\n\n          <PublicRoute\n            path={routes.LOGIN}\n            restricted\n            redirectTo={routes.PHONEBOOK}>\n            <LoginView />\n          </PublicRoute>\n\n          <PrivateRoute\n            path={routes.PHONEBOOK}\n            redirectTo={routes.LOGIN}>\n            <PhoneBookView /> \n          </PrivateRoute>          \n\n          <PublicRoute>\n            <PageNotFound />\n          </PublicRoute>\n          \n        </Switch>\n      </Suspense>\n\n      {/* <AppFooter /> */}\n\n      {/* <ToastContainer autoClose={2500} /> */}\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux'; // Импорт провайдера для хранилища\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store'; // Импорт обьекта из стора (хранилище)\n\nimport App from './App.jsx';\nimport Loader from './components/Loader';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './App.module.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<Loader />} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"AuthNav_list__1-OD1\",\"item\":\"AuthNav_item__3InN4\",\"link\":\"AuthNav_link__10zfd\",\"link--active\":\"AuthNav_link--active__16eV9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Navigation_list__1xGkA\",\"item\":\"Navigation_item__2fjkE\",\"link\":\"Navigation_link__2nL1_\",\"link--active\":\"Navigation_link--active__2qrUB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"UserMenu_profile___Q_Pa\",\"thumb\":\"UserMenu_thumb__5Lvfm\",\"avatar\":\"UserMenu_avatar__1pCDC\",\"welcome\":\"UserMenu_welcome__34RH_\",\"email\":\"UserMenu_email__xmlD4\",\"button\":\"UserMenu_button__1qe8R\"};","//  Spinner\nimport Spinner from 'react-loader-spinner';\n\nexport default function Loader() {\n  return (\n    <Spinner\n      role=\"alert\"          \n      type=\"Circles\"\n      color=\"#00BFFF\"\n      width={40}\n      height={40}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '5px',\n      }}\n    />\n  );\n}\n","import { createAction } from '@reduxjs/toolkit'; // Импорт функции создания экшена из тулкита\n\n// Создание экшенов для получаения списка контактов\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\n// Создание экшенов для добавления контакта\nconst addContactRequest = createAction('contacts/addContactsRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\n// Создание экшенов для удаления контакта\nconst deleteContactRequest = createAction('contacts/deleteContactsRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\n// Создание экшена для фильтра\nconst changeFilter = createAction('contacts/change-filter');\n\n// eslint-disable-next-line\nexport default {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n\n  changeFilter,\n};\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nimport actions from './contacts-actions'; // Импорт экшенов из контактов в операции\n\n// Асинхронная операция получения списка контактов (делает запрос, диспатчит экшн получения)\nconst fetchContacts = () => async dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(actions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(actions.fetchContactsError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Асинхронная операция по добавлению контакта (принимает данные с формы, делает запрос, диспатчит экшн добавления)\nconst addContact = (name, number) => async dispatch => {\n  const contact = { name, number };\n\n  dispatch(actions.addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    toast.success('📗 Contact has been added');\n    dispatch(actions.addContactSuccess(data));\n  } catch (error) {\n    dispatch(actions.addContactError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// Асинхронная операция удаления контакта (принимает id, делает запрос, диспатчит экшн удаления)\nconst deleteContact = id => async dispatch => {\n  dispatch(actions.deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${id}`);\n\n    toast.info('📕 Contact has been deleted');\n    dispatch(actions.deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(actions.deleteContactError(error.message));\n    toast.error(error.message);\n  }\n};\n\n// eslint-disable-next-line\nexport default { fetchContacts, addContact, deleteContact };\n","import { combineReducers } from '@reduxjs/toolkit'; // Импорт функции комбайна редюсеров\nimport { createReducer } from '@reduxjs/toolkit'; // Импорт функции создания редюсера\n\nimport actions from './contacts-actions'; // Импорт экшенов из контактов в редюсеры\n\n// Создание редюсера для массива items в контактах (фетч всех контактов, добавление и удаление контакта)\nconst items = createReducer([], {\n  [actions.fetchContactsSuccess]: (_, { payload }) =>\n    payload.sort((a, b) => a.name.localeCompare(b.name)),\n  [actions.addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [actions.deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\n// Создание редюсера для фильтра в контактах\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\n// Создание редюсера для индикации загрузки контактов\nconst loading = createReducer(false, {\n  [actions.fetchContactsRequest]: () => true,\n  [actions.fetchContactsSuccess]: () => false,\n  [actions.fetchContactsError]: () => false,\n\n  [actions.addContactRequest]: () => true,\n  [actions.addContactSuccess]: () => false,\n  [actions.addContactError]: () => false,\n\n  [actions.deleteContactRequest]: () => true,\n  [actions.deleteContactSuccess]: () => false,\n  [actions.deleteContactError]: () => false,\n});\n\n// Создание редюсера обработки ошибок в контактах\nconst error = createReducer(null, {\n  [actions.fetchContactsError]: (_, { payload }) => payload,\n  [actions.addContactError]: (_, { payload }) => payload,\n  [actions.deleteContactError]: (_, { payload }) => payload,\n\n  [actions.fetchContactsRequest]: () => null,\n  [actions.fetchContactsSuccess]: () => null,\n\n  [actions.addContactRequest]: () => null,\n  [actions.addContactSuccess]: () => null,\n\n  [actions.deleteContactRequest]: () => null,\n  [actions.deleteContactSuccess]: () => null,\n});\n\nexport default combineReducers({ items, filter, loading, error });\n","import { createSelector } from '@reduxjs/toolkit'; // Импорт функции для мемоизации селектора\n\nconst getContacts = state => state.contacts.items;\nconst getFilter = state => state.contacts.filter;\nconst getLoading = state => state.contacts.loading;\nconst getError = state => state.contacts.error;\n\n// Мемоизация функции фильтра контактов на базе композитного селектора\nconst getfilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n// eslint-disable-next-line\nexport default {\n  getContacts,\n  getFilter,\n  getLoading,\n  getError,\n  getfilteredContacts,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__LuS5t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__2LFCF\"};"],"sourceRoot":""}